.IFJcode17
JUMP $$main
LABEL $_substr
  PUSHFRAME
  STRLEN GF@$_str_temp_2 LF@$_arg_0
  JUMPIFEQ $_assert_zero GF@$_str_temp_2 int@0
  
  LT GF@$_str_temp_1 LF@$_arg_1 int@1
  JUMPIFEQ $_assert_zero GF@$_str_temp_1 bool@true
  
  LT GF@$_str_temp_1 LF@$_arg_2 int@0
  JUMPIFEQ $_truncate_N GF@$_str_temp_1 bool@true
  
  SUB GF@$_str_temp_1 GF@$_str_temp_2 LF@$_arg_1
  GT GF@$_str_temp_1 LF@$_arg_2 GF@$_str_temp_1
  JUMPIFEQ $_truncate_N GF@$_str_temp_1 bool@true
  MOVE GF@$_stack_temp string@
  JUMP $_compare_next
  LABEL $_truncate_N
  SUB GF@$_str_temp_1 GF@$_str_temp_2 LF@$_arg_1
  MOVE LF@$_arg_2 GF@$_str_temp_1
  
  MOVE GF@$_stack_temp string@
  LABEL $_compare_next
  JUMPIFEQ $_all_done LF@$_arg_2 int@0
  GETCHAR GF@$_str_temp_1 LF@$_arg_0 LF@$_arg_1
  CONCAT GF@$_stack_temp GF@$_stack_temp GF@$_str_temp_1
  ADD LF@$_arg_1 LF@$_arg_1 int@1
  SUB LF@$_arg_2 LF@$_arg_2 int@1
  JUMP $_compare_next
  
  LABEL $_assert_zero
  MOVE GF@$_stack_temp string@
  
  LABEL $_all_done
  PUSHS GF@$_stack_temp
  POPFRAME
  RETURN

LABEL $_length
  PUSHFRAME
  STRLEN GF@$_stack_temp LF@$_arg_0
  PUSHS GF@$_stack_temp
  POPFRAME
  RETURN

LABEL $_chr
  PUSHFRAME
  INT2CHAR GF@$_stack_temp LF@$_arg_0
  PUSHS GF@$_stack_temp
  POPFRAME
  RETURN

LABEL $_asc
  PUSHFRAME
  STRLEN GF@$_stack_temp LF@$_arg_0
  JUMPIFEQ $_assert_zero_end GF@$_stack_temp int@0
  
  SUB GF@$_stack_temp GF@$_stack_temp int@1
  LT GF@$_str_temp_1 LF@$_arg_1 int@0
  JUMPIFEQ $_assert_zero_end GF@$_str_temp_1 bool@true
  
  GT GF@$_str_temp_1 LF@$_arg_1 GF@$_stack_temp
  JUMPIFEQ $_assert_zero_end GF@$_str_temp_1 bool@true
  
  STRI2INT GF@$_stack_temp LF@$_arg_0 LF@$_arg_1
  JUMP $_asc_end
  
  LABEL $_assert_zero_end
  MOVE GF@$_stack_temp int@0
  LABEL $_asc_end
  PUSHS GF@$_stack_temp
  POPFRAME
  RETURN

LABEL $_factorial
PUSHFRAME
DEFVAR LF@_n
MOVE LF@_n LF@$_arg_0
DEFVAR LF@_temp_result
# Var temp_result init
MOVE LF@_temp_result int@0
DEFVAR LF@_decremented_n
# Var decremented_n init
MOVE LF@_decremented_n int@0
DEFVAR LF@_result
# Var result init
MOVE LF@_result int@0
PUSHS LF@_n
PUSHS int@2
# Stack arithmetics:
LTS

# Condition evaluation
PUSHS bool@true
JUMPIFNEQS $condition89361717$end

PUSHS int@1
# Save final result
POPS LF@_result

JUMP $end89361717$if
LABEL $condition89361717$end
PUSHS LF@_n
PUSHS int@1
# Stack arithmetics:
SUBS

# Save final result
POPS LF@_decremented_n

PUSHS LF@_decremented_n
CREATEFRAME
# Add 0 argument
DEFVAR TF@$_arg_0
POPS TF@$_arg_0

# Calling factorial
CALL $_factorial

# Save final result
POPS LF@_temp_result

PUSHS LF@_n
PUSHS LF@_temp_result
# Stack arithmetics:
MULS

# Save final result
POPS LF@_result

LABEL $end89361717$if
PUSHS LF@_result
POPFRAME
RETURN


POPFRAME
RETURN


LABEL $$main
CREATEFRAME
PUSHFRAME
DEFVAR GF@$_stack_temp
DEFVAR GF@$_str_temp_1
DEFVAR GF@$_str_temp_2
DEFVAR LF@_a
# Var a init
MOVE LF@_a int@0
DEFVAR LF@_vysl
# Var vysl init
MOVE LF@_vysl int@0
PUSHS string@Zadejte\032cislo\032pro\032vypocet\032faktorialu
# Saving to temp for print statement
POPS GF@$_stack_temp

WRITE GF@$_stack_temp
WRITE string@?\032
READ LF@_a INT
PUSHS LF@_a
PUSHS int@0
# Stack arithmetics:
LTS

# Condition evaluation
PUSHS bool@true
JUMPIFNEQS $condition933829222$end

PUSHS string@\010Faktorial\032nelze\032spocitat\010
# Saving to temp for print statement
POPS GF@$_stack_temp

WRITE GF@$_stack_temp
JUMP $end933829222$if
LABEL $condition933829222$end
PUSHS LF@_a
CREATEFRAME
# Add 0 argument
DEFVAR TF@$_arg_0
POPS TF@$_arg_0

# Calling factorial
CALL $_factorial

# Save final result
POPS LF@_vysl

PUSHS string@\010Vysledek\032je:
# Saving to temp for print statement
POPS GF@$_stack_temp

WRITE GF@$_stack_temp
PUSHS LF@_vysl
# Saving to temp for print statement
POPS GF@$_stack_temp

WRITE GF@$_stack_temp
PUSHS string@\010
# Saving to temp for print statement
POPS GF@$_stack_temp

WRITE GF@$_stack_temp
LABEL $end933829222$if
POPFRAME

# RESULT 0
